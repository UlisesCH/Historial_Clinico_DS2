/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Clinico.Vistas;

import Clinico.Modulos.CRUD_DatosExamenes;
import static Clinico.Modulos.CRUD_DatosExamenes.listaDatos;
import static Clinico.Modulos.CRUD_DatosExamenes.listaDatosExamenes;
import Clinico.Modulos.CRUD_Examenes;
import static Clinico.Modulos.CRUD_Examenes.listaExamenes;
import Clinico.Modulos.CRUD_Recibo;
import Clinico.Controladores.Conexion;
import static Clinico.Controladores.Conexion.URL;
import Clinico.Controladores.DatosExamenes;
import Clinico.Controladores.ExamenClinico;
import Clinico.Controladores.Recibo;
import Contable.Vistas.JFMostrar_InformeLibros;
import Login.LoginContable;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ulise
 */
public class JFCrear_InClinico extends javax.swing.JFrame implements Printable{
    
    //OBJETO PARA INTERACTUAR CON LA TABLA
    DefaultTableModel model;
    Double Total = 0.0;
    int ContadorAuxiliar = 0;
    int ID_Examen = 0;

    //LISTA PARA ALMACENAR LOS DATOS OBTENIDOS DE LA BASE DE DATOS
    public static List<Recibo> listaRecibo = new ArrayList<Recibo>();
    //LISTA PARA ALMACENAR LOS DATOS OBTENIDOS DE LA BASE DE DATOS
    public static List<ExamenClinico> listaExamenClinicos = new ArrayList<ExamenClinico>();
    
    /**
     * Creates new form JFCrear_InClinico
     */
    public JFCrear_InClinico() {
        initComponents();
        this.setLocationRelativeTo(null);
        model = (DefaultTableModel) this.TableInClRecibo.getModel();
        CRUD_DatosExamenes CRDatos = new CRUD_DatosExamenes();
        
        Combo();
        CRDatos.LlenarTablaDatos();
        listaRecibo.clear();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        BtnMosInClinico = new javax.swing.JButton();
        BtnInContable = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        TxtNombCliente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jCFecha = new com.toedter.calendar.JCalendar();
        BtnAgregar = new javax.swing.JButton();
        BtnLimpiar = new javax.swing.JButton();
        CombxExamen = new javax.swing.JComboBox<>();
        BtnCrear = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        TxtEdad = new javax.swing.JTextField();
        JPRecibo = new javax.swing.JPanel();
        jPanelRecibo = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        TxtNomPacienteRecibo = new javax.swing.JLabel();
        TxtFecha = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableInClRecibo = new javax.swing.JTable();
        TxtTotalExamen = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        TxtValor = new javax.swing.JTextField();
        TxtDato = new javax.swing.JLabel();
        BtnDarValor = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        BtnEliminar = new javax.swing.JButton();
        BtnGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("CREAR INFORME DE EXAMEN CLINICO");

        BtnMosInClinico.setText("MOSTRAR INFORMES");
        BtnMosInClinico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnMosInClinicoActionPerformed(evt);
            }
        });

        BtnInContable.setText("INFORME CONTABLE");
        BtnInContable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnInContableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(BtnMosInClinico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(23, 23, 23)
                .addComponent(BtnInContable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(50, 50, 50))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(188, 188, 188)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(195, 195, 195))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnMosInClinico)
                    .addComponent(BtnInContable))
                .addGap(16, 16, 16))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));

        jLabel2.setText("NOMBRE DE PACIENTE");

        jLabel3.setText("NOMBRE DE EXAMEN CLINICO");

        jLabel5.setText("FECHA EN QUE SE REALIZO");

        BtnAgregar.setText("AGREGAR");
        BtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAgregarActionPerformed(evt);
            }
        });

        BtnLimpiar.setText("LIMPIAR RECIBO");
        BtnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnLimpiarActionPerformed(evt);
            }
        });

        CombxExamen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccion Examen" }));

        BtnCrear.setText("CREAR");
        BtnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCrearActionPerformed(evt);
            }
        });

        jLabel4.setText("EDAD");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCFecha, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TxtNombCliente)
                            .addComponent(CombxExamen, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(BtnCrear)
                            .addComponent(TxtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(BtnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BtnAgregar)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxtNombCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CombxExamen)
                    .addComponent(BtnCrear))
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnAgregar)
                    .addComponent(BtnLimpiar))
                .addGap(12, 12, 12))
        );

        jPanelRecibo.setBackground(new java.awt.Color(204, 204, 255));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("RECIBO DE EXAMENES REALIZADOS");

        jLabel7.setText("NOMBRE");

        TxtNomPacienteRecibo.setText("NOMBRE PACIENTE");

        TxtFecha.setText("FECHA");

        TableInClRecibo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre Examen", "Valor", "Unidad", "Precio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableInClRecibo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableInClReciboMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableInClRecibo);
        if (TableInClRecibo.getColumnModel().getColumnCount() > 0) {
            TableInClRecibo.getColumnModel().getColumn(0).setMinWidth(50);
            TableInClRecibo.getColumnModel().getColumn(0).setPreferredWidth(3);
            TableInClRecibo.getColumnModel().getColumn(0).setMaxWidth(50);
            TableInClRecibo.getColumnModel().getColumn(2).setMinWidth(70);
            TableInClRecibo.getColumnModel().getColumn(2).setPreferredWidth(30);
            TableInClRecibo.getColumnModel().getColumn(2).setMaxWidth(70);
            TableInClRecibo.getColumnModel().getColumn(3).setMinWidth(70);
            TableInClRecibo.getColumnModel().getColumn(3).setPreferredWidth(30);
            TableInClRecibo.getColumnModel().getColumn(3).setMaxWidth(70);
            TableInClRecibo.getColumnModel().getColumn(4).setMinWidth(70);
            TableInClRecibo.getColumnModel().getColumn(4).setPreferredWidth(30);
            TableInClRecibo.getColumnModel().getColumn(4).setMaxWidth(70);
        }

        TxtTotalExamen.setText("TOTAL");

        jLabel9.setText("PRECIO TOTAL:");

        jLabel10.setText("LABORATORIO CLINICO DE ANALISIS HENDRYKS");

        TxtValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtValorActionPerformed(evt);
            }
        });

        TxtDato.setText("PRUEBA");

        BtnDarValor.setText("DAR VALOR");
        BtnDarValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDarValorActionPerformed(evt);
            }
        });

        jLabel8.setText("VALOR");

        javax.swing.GroupLayout jPanelReciboLayout = new javax.swing.GroupLayout(jPanelRecibo);
        jPanelRecibo.setLayout(jPanelReciboLayout);
        jPanelReciboLayout.setHorizontalGroup(
            jPanelReciboLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelReciboLayout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(TxtTotalExamen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(32, 32, 32))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelReciboLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(64, 64, 64))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelReciboLayout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addGap(82, 82, 82))
            .addGroup(jPanelReciboLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(5, 5, 5))
            .addGroup(jPanelReciboLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TxtNomPacienteRecibo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(62, 62, 62)
                .addComponent(TxtFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(42, 42, 42))
            .addGroup(jPanelReciboLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(jPanelReciboLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelReciboLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TxtDato)
                        .addGap(164, 164, 164))
                    .addGroup(jPanelReciboLayout.createSequentialGroup()
                        .addComponent(TxtValor, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(BtnDarValor)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelReciboLayout.setVerticalGroup(
            jPanelReciboLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelReciboLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelReciboLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(TxtNomPacienteRecibo)
                    .addComponent(TxtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelReciboLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxtDato)
                    .addComponent(jLabel8))
                .addGap(12, 12, 12)
                .addGroup(jPanelReciboLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BtnDarValor, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(TxtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanelReciboLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(TxtTotalExamen, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(5, 5, 5))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 255));

        BtnEliminar.setText("ELIMINAR");
        BtnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEliminarActionPerformed(evt);
            }
        });

        BtnGuardar.setText("GUARDAR INFORME");
        BtnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(BtnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(85, 85, 85)
                .addComponent(BtnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnEliminar)
                    .addComponent(BtnGuardar))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout JPReciboLayout = new javax.swing.GroupLayout(JPRecibo);
        JPRecibo.setLayout(JPReciboLayout);
        JPReciboLayout.setHorizontalGroup(
            JPReciboLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelRecibo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JPReciboLayout.setVerticalGroup(
            JPReciboLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPReciboLayout.createSequentialGroup()
                .addComponent(jPanelRecibo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JPRecibo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(JPRecibo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnMosInClinicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnMosInClinicoActionPerformed
        // TODO add your handling code here:
        //OBJETO PARA INTERACTUAR CON EL JFMostrar_InClinico
        JFMostrar_InClinico Mostrar = new JFMostrar_InClinico();
        //SE INDICA QUE SE MUESTRE LA VENTANA
        Mostrar.setVisible(true);
        //SE OCULTA LA VENTANA ACTUAL
        this.dispose();
    }//GEN-LAST:event_BtnMosInClinicoActionPerformed

    private void BtnInContableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnInContableActionPerformed
        // TODO add your handling code here:
        LoginContable Login = new LoginContable();
        //SE INDICA QUE SE MUESTRE LA VENTANA
        Login.setVisible(true);
        //SE OCULTA LA VENTANA ACTUAL
        this.dispose();
    }//GEN-LAST:event_BtnInContableActionPerformed

    private void BtnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnLimpiarActionPerformed
        // TODO add your handling code here:
        
        listaRecibo.clear();
        listaExamenClinicos.clear();
        listaDatos.clear();
        listaDatosExamenes.clear();
        
        TxtNombCliente.setText("");
        TxtNomPacienteRecibo.setText("Nombre Paciente");
        TxtTotalExamen.setText("Total");
        TxtFecha.setText("Fecha");
        TxtDato.setText("Dato");
        TxtValor.setText("");
        
        model.setRowCount(0);
    }//GEN-LAST:event_BtnLimpiarActionPerformed

    private void BtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAgregarActionPerformed
        
        String Nombre_Examen;
        String CantidadMuestra;
        Double Precio_Examen;
        String dia;
        String mes;
        String anio;
        String Nombre_Cliente;
        int Edad_Cliente;

        ExamenClinico examenClinico = new ExamenClinico();
        Recibo recibo = new Recibo();
            
        //OBJETO PARA ENTERACTUAR CON LA CONEXION
        Conexion conec = new Conexion();
        //CREA REALIZA LA CONEXION Y CREA LA TABLA SI NO HAY
        conec.CrearTablas();
        
        try {
            // TODO add your handling code here:
            
            //SE OBTIENEN LOS DATOS DEL JCALENDAT
            dia = Integer.toString(jCFecha.getCalendar().get(Calendar.DAY_OF_MONTH));
            mes = Integer.toString(jCFecha.getCalendar().get(Calendar.MONTH)+1);
            anio = Integer.toString(jCFecha.getCalendar().get(Calendar.YEAR));
            //SE OBTIENES LOS DATOS DE LOS INPUTS
            
            Nombre_Cliente = TxtNombCliente.getText();
            Edad_Cliente = Integer.parseInt(TxtEdad.getText());
            
            //VARIABLE PARA EL RESULTADO OBTENIDO
            ResultSet result = null;
            
            //SE INDICA LA ACCION CON LA BASE DE DATOS (SE OBTINIENE LOS DATOS ALMACENADOS)
            PreparedStatement st = conec.conexion.prepareStatement("select * "
                    + "from TBL_Examen where Nombre_Examen ='"+CombxExamen.getSelectedItem().toString()+"'");
            //SE ALMACENA LOS RESULTADOS
            result = st.executeQuery();

            ID_Examen = result.getInt("ID");
            Nombre_Examen = result.getString("Nombre_Examen");
            CantidadMuestra = result.getString("Rango_Muestra");
            Precio_Examen = result.getDouble("Precio_Examen");
            
            conec.conexion.close();
            
            //SE ALMACENA LOS VALOR DE LA FECHA
            String Fecha = dia+ "/" +mes+ "/" +anio;
            
            recibo.setNombre_Cliente(Nombre_Cliente);
            recibo.setEdad_Cliente(Edad_Cliente);
            recibo.setFecha(Fecha);
            
            examenClinico.setID(ID_Examen);
            examenClinico.setNombreExamen(Nombre_Examen);
            examenClinico.setRangoMuestra(CantidadMuestra);
            examenClinico.setPrecioExamen(Precio_Examen);
            
            //SE AGREGA EL CONSTRUCTOR AL ARREGLO
            listaRecibo.add(recibo);
            listaExamenClinicos.add(examenClinico);

            Llenar();
        } catch (SQLException ex) {
            Logger.getLogger(JFCrear_InClinico.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_BtnAgregarActionPerformed

    
    
    private void BtnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnGuardarActionPerformed
        // TODO add your handling code here:
        Guardar();
    }//GEN-LAST:event_BtnGuardarActionPerformed

    private void BtnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEliminarActionPerformed
        // TODO add your handling code here:
        
        int fila = TableInClRecibo.getSelectedRow();
        String Nombre;
        if(fila == -1){
            JOptionPane.showMessageDialog(null, "NO SE A SELECIONADO FILA");
        }
        else{
            Nombre = (String) TableInClRecibo.getValueAt(fila, 1);
            
            for(int index = 0; index < listaExamenClinicos.size(); index++){
                
                if(listaExamenClinicos.get(index).getNombreExamen().equals(Nombre)){
                    listaExamenClinicos.remove(index);
                    
                    break;
                }
            }

        }
        
        Llenar();
    }//GEN-LAST:event_BtnEliminarActionPerformed

    private void BtnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCrearActionPerformed
        // TODO add your handling code here:
        
        //OBJETO PARA INTERACTUAR CON EL JFCrear_Partida
        JFCrear_Examen Examen = new JFCrear_Examen();
        //SE INDICA QUE SE MUESTRE LA VENTANA
        Examen.setVisible(true);
        //SE OCULTA LA VENTANA ACTUAL
        this.dispose();
        
    }//GEN-LAST:event_BtnCrearActionPerformed

    private void BtnDarValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDarValorActionPerformed
        // TODO add your handling code here:
        DatosExamenes datosExamenes = new DatosExamenes();
        int fila = TableInClRecibo.getSelectedRow();
        
        if("--".equals((String) TableInClRecibo.getValueAt(fila, 0).toString())){
            JOptionPane.showMessageDialog(null, "FILA SELECCIONADA NO ES VALIDA");
        }else{
            
            int ID = Integer.parseInt((String) TableInClRecibo.getValueAt(fila, 0).toString());
            String Unidad = (String) TableInClRecibo.getValueAt(fila, 3).toString();
            boolean Auxiliar = false;

            datosExamenes.setID(ID);
            datosExamenes.setDato(TxtDato.getText());
            datosExamenes.setValor(TxtValor.getText());
            datosExamenes.setUnidad(Unidad);

            if(listaDatosExamenes.isEmpty()){

                listaDatosExamenes.add(datosExamenes);

            }else{
                for(int index = 0; index < listaDatosExamenes.size(); index++){

                    if(listaDatosExamenes.get(index).getID() == ID){

                        datosExamenes.setIDExamen(listaDatosExamenes.get(index).getIDExamen());

                        listaDatosExamenes.set(index, datosExamenes);

                        Auxiliar = true;
                    }
                }if(Auxiliar == false){
                    listaDatosExamenes.add(datosExamenes);
                }

            }

            ListaDatos();

            TxtDato.setText("Dato");
            TxtValor.setText("");

            Llenar();
        }

    }//GEN-LAST:event_BtnDarValorActionPerformed

    private void TxtValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtValorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtValorActionPerformed

    private void TableInClReciboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableInClReciboMouseClicked
        // TODO add your handling code here:
        String dato;
        String valor;
        int fila = TableInClRecibo.getSelectedRow();

        if(fila == -1){
            JOptionPane.showMessageDialog(null, "NO SE A SELECIONADO FILA");
        }
        else{
            
            dato = (String) TableInClRecibo.getValueAt(fila, 1);
            valor = (String) TableInClRecibo.getValueAt(fila, 2);

            TxtDato.setText(dato);
            TxtValor.setText(String.valueOf(valor));
            
        }
        
    }//GEN-LAST:event_TableInClReciboMouseClicked

    public void Guardar(){
        
        //OBJETO PARA ENTERACTUAR CON EL CRUD
        CRUD_Recibo CrRecibo = new CRUD_Recibo();
        //OBJETO PARA ENTERACTUAR CON LA CONEXION
        Conexion conec = new Conexion();
        //CREA REALIZA LA CONEXION Y CREA LA TABLA SI NO HAY
        conec.CrearTablas();

        //SE MANDA LOS VALORES AL INSERTAR
        CrRecibo.Insertar(listaRecibo.get(0).getNombre_Cliente()
                ,listaRecibo.get(0).getEdad_Cliente()
                ,Total,listaRecibo.get(0).getFecha());

        JOptionPane.showMessageDialog(null, "DATOS GUARDADOS");

        Imprimir();

        listaRecibo.clear();
        listaExamenClinicos.clear();
        listaDatos.clear();
        listaDatosExamenes.clear();

        TxtNombCliente.setText("");
        TxtEdad.setText("");

        TxtNomPacienteRecibo.setText("Nombre Paciente");
        TxtTotalExamen.setText("Total");
        TxtFecha.setText("Fecha");

        model.setRowCount(0);

    }
    
    public void Llenar(){
        
        int ContAux = 0;
        Total = 0.0;
        
        //SE LIMPIA LA TABLA
        model.setRowCount(0);

        //CICLO PARA LLENAR LA TABLA CON LOS VALORES DEL ARREGLO
        for(int PosC = 0; PosC < listaExamenClinicos.size(); PosC++){

            TxtNomPacienteRecibo.setText(listaRecibo.get(PosC).getNombre_Cliente());

            model.addRow(new Object[]{"--",
                    listaExamenClinicos.get(PosC).getNombreExamen()
                    ," "," ",listaExamenClinicos.get(PosC).getPrecioExamen()});
            
            for(int PosD = 0; PosD < listaDatos.size(); PosD++){
                
                if(listaDatosExamenes.get(PosD).getIDExamen() == listaExamenClinicos.get(PosC).getID()){

                    model.addRow(new Object[]{listaDatosExamenes.get(PosD).getID(),
                                            listaDatosExamenes.get(PosD).getDato(),
                                            listaDatosExamenes.get(PosD).getValor(),
                                            listaDatosExamenes.get(PosD).getUnidad()," "});

                }
                
            }
            
            TxtFecha.setText(listaRecibo.get(PosC).getFecha());
            
            Total = Total+listaExamenClinicos.get(PosC).getPrecioExamen();

        }
        
        TxtTotalExamen.setText(""+Total);
        
    }
    
    public void ListaDatos(){
        
        for(int i = 0; i < listaDatosExamenes.size(); i++){
            System.out.println("Dato "+listaDatosExamenes.get(i).getDato());
            System.out.println("Valor "+listaDatosExamenes.get(i).getValor());
        }
        
    }
    
    public void Combo(){
        
        //OBJETO PARA ENTERACTUAR CON EL CRUD
        CRUD_Examenes cr = new CRUD_Examenes();
        CRUD_DatosExamenes Cr_DatosExamenes = new CRUD_DatosExamenes();
        //SE LLENA EL ARREGLO CON LOS VALORES DE LA TABLA
        cr.LlenarTabla();
        Cr_DatosExamenes.LlenarTablaDatos();
        listaDatosExamenes.clear();
        
        //CICLO PARA LLENAR LA TABLA CON LOS VALORES DEL ARREGLO
        for(int PosC = 0; PosC < listaExamenes.size(); PosC++){
            
            System.out.println("Se lleno el arreglo con los datos"+ listaExamenes.get(PosC).getNombreExamen());
            
            CombxExamen.addItem(listaExamenes.get(PosC).getNombreExamen());

        }
        
    }
    
    public void Imprimir(){
        Document documento = new Document();
        
        try{
            String ruta = System.getProperty("user.home");
            PdfWriter.getInstance(documento, new FileOutputStream(ruta +URL+"Recibo_" 
                            +TxtNombCliente.getText().trim() + ".pdf"));
            
            documento.open();
            
            Paragraph parrafo = new Paragraph();
            
            parrafo.setAlignment(Paragraph.ALIGN_CENTER);
            parrafo.add("LABORATORIO CLINICO DE ANALISIS HENDRYKS\n \n");
            parrafo.add(" Lotificación Avilés frente a Lotificacion San Emilio,\n");
            parrafo.add("Santa Elena, Usulután\n \n");
            parrafo.setFont(FontFactory.getFont("Tahoma", 14, Font.BOLD, BaseColor.DARK_GRAY));
            
            documento.add(parrafo);
            parrafo.clear();
            
            parrafo.setAlignment(Paragraph.ALIGN_LEFT);
            parrafo.add("PACIENTE: "+listaRecibo.get(0).getNombre_Cliente()+"\n \n");
            parrafo.setFont(FontFactory.getFont("Tahoma", 12, Font.NORMAL, BaseColor.DARK_GRAY));
            
            documento.add(parrafo);

            PdfPTable tablaCliente = new PdfPTable(2);
            tablaCliente.addCell("Nombre del Examen");
            tablaCliente.addCell("Precio");

            //CICLO PARA LLENAR LA TABLA CON LOS VALORES DEL ARREGLO
            for(int PosC = 0; PosC < listaExamenClinicos.size(); PosC++){
            
                tablaCliente.addCell(listaExamenClinicos.get(PosC).getNombreExamen());
                tablaCliente.addCell(listaExamenClinicos.get(PosC).getPrecioExamen().toString());
                
                PDFExamenes(PosC);
                
            }
            documento.add(tablaCliente);
            
            parrafo.clear();
            
            parrafo.setAlignment(Paragraph.ALIGN_LEFT);
            parrafo.add("PRECIO TOTAL: "+TxtTotalExamen.getText()+"\n \n");
            parrafo.add(listaRecibo.get(0).getFecha()+"\n \n");
            parrafo.add("Observaciones:");
            parrafo.setFont(FontFactory.getFont("Tahoma", 14, Font.BOLD, BaseColor.DARK_GRAY));
            
            documento.add(parrafo);

            documento.close();
            
            JOptionPane.showMessageDialog(null, "Reporte creado correctamente");
            
        }catch (FileNotFoundException ex) {
            Logger.getLogger(JFMostrar_InClinico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(JFMostrar_InClinico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void PDFExamenes(int posEx){
        boolean Auxiliar = true;
        Document documento = new Document();
        
        try {
            
            String ruta = System.getProperty("user.home");
            PdfWriter.getInstance(documento, new FileOutputStream(ruta +URL 
                    +TxtNombCliente.getText().trim()+"_"
                    +listaExamenClinicos.get(posEx).getNombreExamen().trim()+ ".pdf"));
            
            documento.open();
            
            Paragraph parrafo = new Paragraph();
            
            parrafo.setAlignment(Paragraph.ALIGN_CENTER);
            parrafo.add("LABORATORIO CLINICO DE ANALISIS HENDRYKS\n \n");
            parrafo.add("Lotificación Avilés frente a Lotificacion San Emilio,\n");
            parrafo.add("Santa Elena, Usulután\n \n");
            parrafo.setFont(FontFactory.getFont("Tahoma", 14, Font.BOLD, BaseColor.DARK_GRAY));
            
            documento.add(parrafo);
            parrafo.clear();
            
            parrafo.setAlignment(Paragraph.ALIGN_LEFT);
            parrafo.add("DOCTOR(A): \n \n");
            parrafo.add("PACIENTE: "+listaRecibo.get(0).getNombre_Cliente()+"       "
                     + "EDAD: "+listaRecibo.get(0).getEdad_Cliente()+"\n \n");
            parrafo.setFont(FontFactory.getFont("Tahoma", 12, Font.BOLD, BaseColor.DARK_GRAY));

            documento.add(parrafo);
            parrafo.clear();

            parrafo.setAlignment(Paragraph.ALIGN_LEFT);
            parrafo.add("EXAMEN: "+listaExamenClinicos.get(posEx).getNombreExamen()+"\n \n");
            parrafo.add("Rango de Mustra: "+listaExamenClinicos.get(posEx).getRangoMuestra()+"\n \n");
            parrafo.setFont(FontFactory.getFont("Tahoma", 12, Font.BOLD, BaseColor.DARK_GRAY));
            
            documento.add(parrafo);

            //CICLO PARA LLENAR LA TABLA CON LOS VALORES DEL ARREGLO
            for(int posDE = 0; posDE < listaDatosExamenes.size(); posDE++){

                if(listaDatosExamenes.get(posDE).getIDExamen() 
                    == listaExamenClinicos.get(posEx).getID()){
                    
                    if("".equals(listaDatosExamenes.get(posDE).getUnidad())){
                        Auxiliar = false;
                    }
                    
                }
            }
            
            if(Auxiliar){
                PdfPTable tablaCliente = new PdfPTable(3);
                tablaCliente.addCell("Prueba");
                tablaCliente.addCell("Valor");
                tablaCliente.addCell("Unidad");

                //CICLO PARA LLENAR LA TABLA CON LOS VALORES DEL ARREGLO
                for(int posDE = 0; posDE < listaDatosExamenes.size(); posDE++){

                    if(listaDatosExamenes.get(posDE).getIDExamen() 
                        == listaExamenClinicos.get(posEx).getID()){

                        tablaCliente.addCell(listaDatosExamenes.get(posDE).getDato());
                        tablaCliente.addCell(listaDatosExamenes.get(posDE).getValor());
                        tablaCliente.addCell(listaDatosExamenes.get(posDE).getUnidad());
                    }    

                }

                documento.add(tablaCliente);
            }else{
                
                PdfPTable tablaCliente = new PdfPTable(2);
                tablaCliente.addCell("Prueba");
                tablaCliente.addCell("Valor");

                //CICLO PARA LLENAR LA TABLA CON LOS VALORES DEL ARREGLO
                for(int posDE = 0; posDE < listaDatosExamenes.size(); posDE++){
                    
                    if(listaDatosExamenes.get(posDE).getIDExamen()
                            == listaExamenClinicos.get(posEx).getID()){
                        
                        tablaCliente.addCell(listaDatosExamenes.get(posDE).getDato());
                        tablaCliente.addCell(listaDatosExamenes.get(posDE).getValor());
                        
                    }
                    
                }

                documento.add(tablaCliente);
    
            }
          
            parrafo.clear();

            parrafo.setAlignment(Paragraph.ALIGN_LEFT);
            parrafo.add(listaRecibo.get(0).getFecha()+"\n \n");
            parrafo.setFont(FontFactory.getFont("Tahoma", 14, Font.BOLD, BaseColor.DARK_GRAY));
            
            documento.add(parrafo);
            
            documento.close();  
            
        }catch (FileNotFoundException ex) {
            Logger.getLogger(JFMostrar_InClinico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(JFMostrar_InClinico.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFCrear_InClinico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFCrear_InClinico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFCrear_InClinico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFCrear_InClinico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFCrear_InClinico().setVisible(true);
                //OBJETO PARA ENTERACTUAR CON LA CONEXION
                Conexion conec = new Conexion();
                //CREA REALIZA LA CONEXION Y CREA LA TABLA SI NO HAY
                conec.CrearTablas();
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAgregar;
    private javax.swing.JButton BtnCrear;
    private javax.swing.JButton BtnDarValor;
    private javax.swing.JButton BtnEliminar;
    private javax.swing.JButton BtnGuardar;
    private javax.swing.JButton BtnInContable;
    private javax.swing.JButton BtnLimpiar;
    private javax.swing.JButton BtnMosInClinico;
    private javax.swing.JComboBox<String> CombxExamen;
    private javax.swing.JPanel JPRecibo;
    private javax.swing.JTable TableInClRecibo;
    private javax.swing.JLabel TxtDato;
    private javax.swing.JTextField TxtEdad;
    private javax.swing.JLabel TxtFecha;
    private javax.swing.JLabel TxtNomPacienteRecibo;
    private javax.swing.JTextField TxtNombCliente;
    private javax.swing.JLabel TxtTotalExamen;
    private javax.swing.JTextField TxtValor;
    private com.toedter.calendar.JCalendar jCFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelRecibo;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public int print(Graphics graf, PageFormat pagFor, int index) throws PrinterException 
    {
        
        if(index>0){
            return NO_SUCH_PAGE;
        }
        
        Graphics2D gra2d = (Graphics2D) graf;
        gra2d.translate(pagFor.getImageableX(), pagFor.getImageableY());
        gra2d.scale(1.0, 1.0);
        
        JPRecibo.printAll(graf);
        
        return PAGE_EXISTS;
    }

    
}
